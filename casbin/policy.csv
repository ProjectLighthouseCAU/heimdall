# Policy format: p, domain, user/role, resource, allowed-actions
# Role format: g, user, role

# Static policy:
# actions: read, write, create, delete

# user can read and write own resources
p, beacon, role::user, /user/:username/model, (read)|(write)
p, beacon, role::user, /user/:publicuser/model, read

# admin can do everything
p, beacon, role::admin, /user/*/model, .*

p, internal, role::admin, /users, GET
p, internal, role::admin, /user/:id, (GET)|(POST)|(PUT)|(DELETE)
p, internal, role::admin, /user, GET
p, internal, role::admin, /user/:userid/roles, GET
p, internal, role::admin, /user/:userid/role/:roleid, (PUT)|(DELETE)

p, internal, role::admin, /registration-keys, GET
p, internal, role::admin, /registration-key/:id, (GET)|(POST)|(PUT)|(DELETE)
p, internal, role::admin, /registration-key, GET

p, internal, role::admin, /roles, GET
p, internal, role::admin, /role/:id, (GET)|(POST)|(DELETE)
p, internal, role::admin, /role, GET
p, internal, role::admin, /role/:roleid/users, GET
p, internal, role::admin, /role/:roleid/user/:userid, (PUT)|(DELETE)

p, internal, user::Testuser, /test, GET
p, internal, role::Testrole, /test2, GET

# Dynamic policy:

# user role mapping
#g, user::testuser, role::user
#g, user::testadmin, role::user
#g, user::testadmin, role::admin
#g, user::testpublicuser, role::user
#g, user::testpublicuser, role::public
basePath: /
definitions:
  model.Group:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      resources:
        items:
          $ref: '#/definitions/model.Resource'
        type: array
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.Resource:
    properties:
      created_at:
        type: string
      id:
        type: integer
      path:
        type: string
      updated_at:
        type: string
    type: object
  model.Token:
    properties:
      created_at:
        type: string
      expires_at:
        description: IssuedAt  time.Time --> gorm.Model.CreatedAt
        type: string
      id:
        type: integer
      token:
        type: string
      updated_at:
        type: string
      userID:
        description: foreign key
        type: integer
    type: object
  model.User:
    properties:
      created_at:
        type: string
      groups:
        items:
          $ref: '#/definitions/model.Group'
        type: array
      id:
        type: integer
      registration_key_id:
        description: foreign key (pointer in order to be nullable)
        type: integer
      resources:
        items:
          $ref: '#/definitions/model.Resource'
        type: array
      tokens:
        description: one-to-many
        items:
          $ref: '#/definitions/model.Token'
        type: array
      updated_at:
        type: string
      username:
        type: string
    required:
    - username
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is the REST API of Project Lighthouse
  title: Lighthouse API
  version: "1.0"
paths:
  /register:
    post:
      consumes:
      - application/json
      description: Creates a user with a registration key (no extra auth needed)
      operationId: RegisterUser
      produces:
      - text/plain
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
  /user:
    post:
      consumes:
      - application/json
      description: Creates a user without a registration key (permissions needed)
      produces:
      - text/plain
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
  /user/{id}:
    delete:
      description: Creates a user with a registration key (no extra auth needed)
      operationId: RegisterUser
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
    get:
      description: Returns a user given a username
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
    patch:
      consumes:
      - application/json
      description: Updates a user
      operationId: RegisterUser
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
  /users:
    get:
      description: Returns a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
swagger: "2.0"
